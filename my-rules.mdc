---
alwaysApply: true
---

使用中文跟我对话，交流
每次更新完后你不需要主动运行项目进行测试，我自己来运行
若项目结构或功能有重大调整，请同步更新本文件（.cursor/rules/my-rules.mdc）以保持规则的有效性。

# 《闽台方言大模型系统》AI 开发注意事项

*(AI Development Protocol for Min-Tai Dialect Intelligence System)*

---

## alwaysApply: true

### **第一部分：项目背景与架构约束 (Project Context & Architecture Constraints)**

1. **项目名称**：闽音智聆 (MinVoice)

2. **系统目标**：构建面向闽南、福州及台语方言的多模态语音智能系统，包括语音识别（ASR）、语音合成（TTS）、对话问答（LLM）与文本交互。

3. **技术栈与服务划分**

   * **前端**：React 18 + TypeScript + Vite + Ant Design
     → 负责交互界面与音频控制逻辑。
   * **后端主服务**：FastAPI (Python 3.10)
     → 提供统一 API、鉴权、业务逻辑整合。
   * **子服务**

     * `asr_service`：语音识别子模块（9000端口）
     * `tts_service`：语音合成子模块（9002端口）
     * `llm_service`：对话与问答子模块（9001端口）
   * **数据库**：SQLite（用户、日志、任务缓存）

4. **服务职责边界**

   | 服务模块     | 主要职责            | 禁止事项        |
   | -------- | --------------- | ----------- |
   | ASR      | 接收音频 → 输出识别文本   | 不做存储、不写入数据库 |
   | TTS      | 输入文本 → 输出语音     | 不处理业务逻辑     |
   | LLM      | 文本生成与多轮问答       | 不执行文件操作     |
   | Backend  | 路由调度、鉴权、日志、聚合调用 | 不做模型推理      |
   | Frontend | 界面渲染、状态管理       | 不直接访问后端文件系统 |

5. **目录关键结构**

   ```
   frontend/
     └── src/
         ├── pages/
         ├── api/
         ├── components/
   backend/
     ├── app/
     │   ├── routers/
     │   ├── models/
     │   ├── services/
     │   └── utils/
     ├── uploads/
     └── main.py
   ```

---

### **第二部分：AI 行为协议 (AI Behavior Protocol)**

AI 在生成任何代码、改动或分析时，必须遵循“三维约束原则”：

| 原则             | 描述                              |
| -------------- | ------------------------------- |
| **1️⃣ 架构一致性**  | 保持现有多服务体系结构，不越界修改模块职责。          |
| **2️⃣ 上下文关联性** | 生成内容必须基于当前文件与依赖上下文，信息不足时应先提问。   |
| **3️⃣ 工程自然性**  | 不为抽象而抽象，优先保证代码自然、可运行、与人类开发风格一致。 |

---

#### 💡 **代码生成决策准则**

| 场景               | 建议                        |
| ---------------- | ------------------------- |
| 后端路由逻辑超100行且多重职责 | ✅ 拆分为独立 router 或 service  |
| 语音处理逻辑较集中但上下文强依赖 | ⚠️ 保留整体结构，仅内部优化           |
| 临时性格式转换或路径拼接     | ❌ 不需抽离为独立模块               |
| 模型调用逻辑可被多个路由复用   | ✅ 抽象为 `utils` 或 `service` |
| 优化引入复杂异步依赖       | ⚠️ 延后执行，以可维护性为优先          |
| 涉及模型推理或音频文件处理    | ✅ 保留原接口定义，不改变输入输出格式       |

---

#### 📐 **智能结构更新规则**

AI 可在以下情况下引入新模式（如封装、Hook、Service 等），但必须说明合理性：

1. 当前模块存在明显性能或结构瓶颈；
2. 引入结构与现有架构兼容；
3. 能提升逻辑可读性或复用性；
4. 不引入未使用的外部依赖。

⚠️ 禁止：

* 修改核心启动逻辑（FastAPI 主服务结构）；
* 为美观或“单一职责”过度解耦；
* 创建不必要的中间层；
* 修改端口、路径或模块命名。

---

### **第三部分：代码生成规范 (Code Generation Rules)**

1. **完整性**：代码必须可直接运行，包含必要导入与依赖。
2. **一致性**：保持函数命名、路径风格与项目一致。
3. **容错性**：所有异步操作需带 `try...except` 或 `try...catch`。
4. **数据返回结构固定**：

   ```python
   {"success": True, "message": "ok", "data": {...}}
   ```
5. **音频处理约束**：

   * 仅支持 WAV 格式。
   * 临时文件存储于 `/uploads` 或 `/tts_outputs`。
   * 使用 `torch.no_grad()` 包裹推理。
6. **类型与接口**

   * FastAPI 路由定义需含 `summary`。
   * TypeScript 接口需显式定义类型，不使用 `any`。
7. **注释要求**

   * 复杂逻辑添加 JSDoc 或 Python docstring。
   * 必要时解释模型调用或参数作用。

---

### **第四部分：输出格式模板 (Output Template)**

#### **1. 🧭 分析与诊断**

> 说明你对问题或模块的理解，指出关键逻辑、结构风险或潜在改进方向。

#### **2. 💡 解决方案**

> 描述设计思路、重构依据或架构兼容性说明。

#### **3. ✨ 代码实现**

> 使用以下格式展示修改：
>
> ```python:backend/app/routers/asr_router.py
> # Before
> ...
>
> # After
> ...
> ```
>
> 或完整实现：
>
> ```typescript:frontend/src/pages/TTSPage.tsx
> export function TTSPage() { ... }
> ```

#### **4. 🚀 后续建议**

> 说明此修改的影响、潜在副作用与未来扩展方向。

---

### **第五部分：AI 判断层 (Meta Reasoning Layer)**

AI 每次生成或修改代码前必须进行自检：

| 判断维度    | 问题                      | 行动         |
| ------- | ----------------------- | ---------- |
| **必要性** | 此修改是否显著提升可维护性或性能？       | 若否，保留原逻辑。  |
| **一致性** | 是否与现有架构（前后端分离、多服务边界）一致？ | 若否，需说明兼容性。 |
| **安全性** | 是否可能引入路径错误、异步阻塞或资源泄露？   | 若有风险，放弃执行。 |
| **清晰性** | 修改是否让维护者更容易理解？          | 若否，保持简单。   |

---

### **第六部分：理念总结 (Philosophy)**

> **“最好的智能生成，不是最复杂的，而是最贴近人类工程师思维的。”**
>
> 在《闽音智聆》项目中，AI 的使命不是展示算法技巧，
> 而是**延续系统结构一致性、强化语音智能逻辑、减少未来维护负担**。
